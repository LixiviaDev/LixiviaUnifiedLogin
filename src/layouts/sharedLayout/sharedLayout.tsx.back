import React, { useEffect, useState } from 'react';
import './sharedInterface.css';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faHome } from '@fortawesome/free-solid-svg-icons';
import { LanguageManager } from '../../typeScript/managers/languageManager';
import configData from '../../config.json';
import { Languages } from '../../typeScript/enums/language.enum';

export default function SharedInterface(props: any) {
    const [flexflow] = useState(props.flexflow ?? "column");
    const [languageManager] = useState<LanguageManager>(LanguageManager.getInstance());
    const [isAdmin, setIsAdmin] = useState<boolean>(false);
    const [mainReference] = useState<React.RefObject<HTMLElement>>(React.createRef());

    useEffect(() => componentDidMount(), []);

    useEffect(() => {
        if(mainReference.current != null){
            if(window.innerWidth < 600)
                mainReference.current.style.minHeight = window.innerHeight.toString() + "px";
            else
                mainReference.current.style.minHeight = "100vh";
        }
    }, [mainReference]);

    function componentDidMount() {
        isUserAdmin();
    }

    function logOut() {
        localStorage.removeItem("token");
        window.location.reload();
    }

    async function isUserAdmin() {
        let isAdmin = false;

        try {
            let bodyData = {
                token: localStorage.getItem("token")
            };

            let body = {
                method: 'POST',
                mode: "cors" as RequestMode,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bodyData)
            };

            let res = await fetch(`${configData.API_URL}/${configData.ENDPOINTS.IS_ADMIN}`, body);
            let data: any = await res.json();

            isAdmin = data?.isAdmin;
        } catch(ex) {
            console.error(ex);
        }

        setIsAdmin(isAdmin);
    }

    return(
        <>
        <header className="sharedInterface p-2">
            <nav className="bg-gray-100 w-full">
                <div className="w-full">
                    <div className='w-full flex justify-between m-0 px-2'>
                        <div className='flex justify-center items-center' style={{width: "40px"}}>
                            <a className='text-black text-2xl' href="/">
                                <FontAwesomeIcon icon={faHome} />
                            </a>
                        </div>
                        <div className='flex items-center'>
                            <form className="flex" action='/search' method='get'>
                                <input className="border border-gray-400 rounded px-2 py-1 mr-2" type="search" title='search bar' placeholder={languageManager.get("Shared.SEARCH")} name='search' aria-label="Search"/>
                            </form>
                            {localStorage.getItem("token") == null ? 
                            <a className='px-2 py-1 text-center text-sm font-bold bg-white border border-black rounded flex items-center' href="/login">
                                <p className='m-0'>{languageManager.get("Shared.LOG_IN")}</p>
                            </a>
                            :
                            <>
                            <div className="relative">
                                <div className="cursor-pointer" id="dropdownUser2">
                                    <img src="https://i.pinimg.com/originals/d7/38/9b/d7389ba6dadf70ff848a9804be09ac30.jpg" alt="mdo" className="rounded-full" style={{width:"40px", height:"40px"}}/>
                                </div>
                                <ul className="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-md text-sm z-50">
                                    <li className="p-2">
                                        <select className='w-full border border-gray-300 rounded px-2 py-1'
                                                name="selectLanguage" id="selectLanguage"
                                                onChange={(v) => languageManager.changeAppLanguage(v.target.value as Languages)}>
                                            <option value="current" disabled hidden selected>{languageManager.get("Shared.CHANGE_LANGUAGE")}</option>
                                            <option value={Languages.ES}>{Languages.ES}</option>
                                            <option value={Languages.EN}>{Languages.EN}</option>
                                            <option value={Languages.CA}>{Languages.CA}</option>
                                        </select>
                                    </li>
                                    {isAdmin && <li><a className="block px-4 py-2 hover:bg-gray-100" href="/adminPanel/manageUsers">{languageManager.get("Shared.ADMIN_PANEL")}</a></li>}
                                    <li><button className="block w-full text-left px-4 py-2 hover:bg-gray-100" onClick={logOut}>{languageManager.get("Shared.LOG_OUT")}</button></li>
                                </ul>
                            </div>
                            </>
                            }
                        </div>
                    </div>
                </div>
            </nav>
        </header>

        <main ref={mainReference} className={`sharedInterface flex-${flexflow}`}>
            {props.children}
        </main>

        <footer className="sharedInterface px-2 bg-gray-100 py-2 flex justify-center items-center">
            <p className='text-gray-500'>Esto es un proyecto de fin de grado creado con fines educativos</p>
        </footer>
        </>
    );
}
